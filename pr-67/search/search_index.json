{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CARET analyze # TODO API # Plot Runtime Exceptions","title":"HOME"},{"location":"#caret-analyze","text":"TODO","title":"CARET analyze"},{"location":"#api","text":"Plot Runtime Exceptions","title":"API"},{"location":"exceptions/","text":"Error # Bases: Exception Base class for exception in this module. InvalidArgumentError # Bases: Error Failed to process function. InvalidReaderError # Bases: Error Failed to load architecutre. InvalidRecordsError # Bases: Error Given Records does not have the necessary columns. InvalidTraceFormatError # Bases: Error Failed to load trace data. InvalidYamlFormatError # Bases: Error Failed to load yaml. ItemNotFoundError # Bases: Error Failed to identify item that match the condition. MultipleItemFoundError # Bases: Error Failed to identify item that match the condition. TraceResultAanalyzeError # Bases: Error Failed to parse trace results. __init__ ( * args ) # Construct exception instance. UnsupportedNodeRecordsError # Bases: Error Failed to calculate node path records. UnsupportedTypeError # Bases: Error Given type is unsupported.","title":"Exceptions"},{"location":"exceptions/#caret_analyze.exceptions.Error","text":"Bases: Exception Base class for exception in this module.","title":"Error"},{"location":"exceptions/#caret_analyze.exceptions.InvalidArgumentError","text":"Bases: Error Failed to process function.","title":"InvalidArgumentError"},{"location":"exceptions/#caret_analyze.exceptions.InvalidReaderError","text":"Bases: Error Failed to load architecutre.","title":"InvalidReaderError"},{"location":"exceptions/#caret_analyze.exceptions.InvalidRecordsError","text":"Bases: Error Given Records does not have the necessary columns.","title":"InvalidRecordsError"},{"location":"exceptions/#caret_analyze.exceptions.InvalidTraceFormatError","text":"Bases: Error Failed to load trace data.","title":"InvalidTraceFormatError"},{"location":"exceptions/#caret_analyze.exceptions.InvalidYamlFormatError","text":"Bases: Error Failed to load yaml.","title":"InvalidYamlFormatError"},{"location":"exceptions/#caret_analyze.exceptions.ItemNotFoundError","text":"Bases: Error Failed to identify item that match the condition.","title":"ItemNotFoundError"},{"location":"exceptions/#caret_analyze.exceptions.MultipleItemFoundError","text":"Bases: Error Failed to identify item that match the condition.","title":"MultipleItemFoundError"},{"location":"exceptions/#caret_analyze.exceptions.TraceResultAanalyzeError","text":"Bases: Error Failed to parse trace results.","title":"TraceResultAanalyzeError"},{"location":"exceptions/#caret_analyze.exceptions.TraceResultAanalyzeError.__init__","text":"Construct exception instance.","title":"__init__()"},{"location":"exceptions/#caret_analyze.exceptions.UnsupportedNodeRecordsError","text":"Bases: Error Failed to calculate node path records.","title":"UnsupportedNodeRecordsError"},{"location":"exceptions/#caret_analyze.exceptions.UnsupportedTypeError","text":"Bases: Error Given type is unsupported.","title":"UnsupportedTypeError"},{"location":"plot/","text":"Plot # create_callback_frequency_plot ( callbacks ) staticmethod # Get CallbackFrequencyPlot instance. Parameters: Name Type Description Default callbacks CallbacksType CallbacksType = Union[Application, Executor, Node, CallbackGroup, List[CallbackBase]]. Instances that have callbacks or a list of callbacks. required Returns: Type Description CallbackFrequencyPlot create_callback_jitter_plot ( callbacks ) staticmethod # Get CallbackJitterPlot instance. Parameters: Name Type Description Default callbacks CallbacksType CallbacksType = Union[Application, Executor, Node, CallbackGroup, List[CallbackBase]]. Instances that have callbacks or a list of callbacks. required Returns: Type Description CallbackJitterPlot create_callback_latency_plot ( callbacks ) staticmethod # Get CallbackLatencyPlot instance. Parameters: Name Type Description Default callbacks CallbacksType CallbacksType = Union[Application, Executor, Node, CallbackGroup, List[CallbackBase]]. Instances that have callbacks or a list of callbacks. required Returns: Type Description CallbackLatencyPlot TimeSeriesPlot # show ( xaxis_type = None , ywheel_zoom = True ) # Draw a line graph for each callback using the bokeh library. Parameters: Name Type Description Default xaxis_type Optional [ str ] Type of x-axis of the line graph to be plotted. \"system_time\", \"index\", or \"simtime\" can be specified. The default is \"system_time\". None ywheel_zoom bool If True, the drawn graph can be expanded in the y-axis direction by the mouse wheel. True Raises: Type Description UnsupportedTypeError Argument xaxis_type is not \"system_time\", \"index\", or \"simtime\". to_dataframe ( xaxis_type = None ) # Get time series data for each callback in pandas DataFrame format. Parameters: Name Type Description Default xaxis_type Optional [ str ] Type of time for timestamp. \"system_time\", \"index\", or \"simtime\" can be specified. The default is \"system_time\". None Raises: Type Description UnsupportedTypeError Argument xaxis_type is not \"system_time\", \"index\", or \"simtime\". Notes # xaxis_type \"system_time\" and \"index\" return the same DataFrame. bokeh # callback_info # CallbackFrequencyPlot # Bases: TimeSeriesPlot Class that provides API for callback jitter. This class provides the API to visualize the execution frequency per unit of time for each callback and to obtain it in the pandas DataFrame format. CallbackJitterPlot # Bases: TimeSeriesPlot Class that provides API for callback jitter. This class provides the API to visualize the jitter per unit of time for each callback and to obtain it in the pandas DataFrame format. CallbackLatencyPlot # Bases: TimeSeriesPlot Class that provides API for callback latency. This class provides the API to visualize the latency per unit of time for each callback and to obtain it in the pandas DataFrame format. callback_info_factory # Plot # create_callback_frequency_plot ( callbacks ) staticmethod # Get CallbackFrequencyPlot instance. Parameters: Name Type Description Default callbacks CallbacksType CallbacksType = Union[Application, Executor, Node, CallbackGroup, List[CallbackBase]]. Instances that have callbacks or a list of callbacks. required Returns: Type Description CallbackFrequencyPlot create_callback_jitter_plot ( callbacks ) staticmethod # Get CallbackJitterPlot instance. Parameters: Name Type Description Default callbacks CallbacksType CallbacksType = Union[Application, Executor, Node, CallbackGroup, List[CallbackBase]]. Instances that have callbacks or a list of callbacks. required Returns: Type Description CallbackJitterPlot create_callback_latency_plot ( callbacks ) staticmethod # Get CallbackLatencyPlot instance. Parameters: Name Type Description Default callbacks CallbacksType CallbacksType = Union[Application, Executor, Node, CallbackGroup, List[CallbackBase]]. Instances that have callbacks or a list of callbacks. required Returns: Type Description CallbackLatencyPlot callback_info_interface # TimeSeriesPlot # show ( xaxis_type = None , ywheel_zoom = True ) # Draw a line graph for each callback using the bokeh library. Parameters: Name Type Description Default xaxis_type Optional [ str ] Type of x-axis of the line graph to be plotted. \"system_time\", \"index\", or \"simtime\" can be specified. The default is \"system_time\". None ywheel_zoom bool If True, the drawn graph can be expanded in the y-axis direction by the mouse wheel. True Raises: Type Description UnsupportedTypeError Argument xaxis_type is not \"system_time\", \"index\", or \"simtime\". to_dataframe ( xaxis_type = None ) # Get time series data for each callback in pandas DataFrame format. Parameters: Name Type Description Default xaxis_type Optional [ str ] Type of time for timestamp. \"system_time\", \"index\", or \"simtime\" can be specified. The default is \"system_time\". None Raises: Type Description UnsupportedTypeError Argument xaxis_type is not \"system_time\", \"index\", or \"simtime\". Notes # xaxis_type \"system_time\" and \"index\" return the same DataFrame.","title":"Plot"},{"location":"plot/#caret_analyze.plot.Plot","text":"","title":"Plot"},{"location":"plot/#caret_analyze.plot.bokeh.callback_info_factory.Plot.create_callback_frequency_plot","text":"Get CallbackFrequencyPlot instance. Parameters: Name Type Description Default callbacks CallbacksType CallbacksType = Union[Application, Executor, Node, CallbackGroup, List[CallbackBase]]. Instances that have callbacks or a list of callbacks. required Returns: Type Description CallbackFrequencyPlot","title":"create_callback_frequency_plot()"},{"location":"plot/#caret_analyze.plot.bokeh.callback_info_factory.Plot.create_callback_jitter_plot","text":"Get CallbackJitterPlot instance. Parameters: Name Type Description Default callbacks CallbacksType CallbacksType = Union[Application, Executor, Node, CallbackGroup, List[CallbackBase]]. Instances that have callbacks or a list of callbacks. required Returns: Type Description CallbackJitterPlot","title":"create_callback_jitter_plot()"},{"location":"plot/#caret_analyze.plot.bokeh.callback_info_factory.Plot.create_callback_latency_plot","text":"Get CallbackLatencyPlot instance. Parameters: Name Type Description Default callbacks CallbacksType CallbacksType = Union[Application, Executor, Node, CallbackGroup, List[CallbackBase]]. Instances that have callbacks or a list of callbacks. required Returns: Type Description CallbackLatencyPlot","title":"create_callback_latency_plot()"},{"location":"plot/#caret_analyze.plot.TimeSeriesPlot","text":"","title":"TimeSeriesPlot"},{"location":"plot/#caret_analyze.plot.bokeh.callback_info_interface.TimeSeriesPlot.show","text":"Draw a line graph for each callback using the bokeh library. Parameters: Name Type Description Default xaxis_type Optional [ str ] Type of x-axis of the line graph to be plotted. \"system_time\", \"index\", or \"simtime\" can be specified. The default is \"system_time\". None ywheel_zoom bool If True, the drawn graph can be expanded in the y-axis direction by the mouse wheel. True Raises: Type Description UnsupportedTypeError Argument xaxis_type is not \"system_time\", \"index\", or \"simtime\".","title":"show()"},{"location":"plot/#caret_analyze.plot.bokeh.callback_info_interface.TimeSeriesPlot.to_dataframe","text":"Get time series data for each callback in pandas DataFrame format. Parameters: Name Type Description Default xaxis_type Optional [ str ] Type of time for timestamp. \"system_time\", \"index\", or \"simtime\" can be specified. The default is \"system_time\". None Raises: Type Description UnsupportedTypeError Argument xaxis_type is not \"system_time\", \"index\", or \"simtime\".","title":"to_dataframe()"},{"location":"plot/#caret_analyze.plot.bokeh.callback_info_interface.TimeSeriesPlot.to_dataframe--notes","text":"xaxis_type \"system_time\" and \"index\" return the same DataFrame.","title":"Notes"},{"location":"plot/#caret_analyze.plot.bokeh","text":"","title":"bokeh"},{"location":"plot/#caret_analyze.plot.bokeh.callback_info","text":"","title":"callback_info"},{"location":"plot/#caret_analyze.plot.bokeh.callback_info.CallbackFrequencyPlot","text":"Bases: TimeSeriesPlot Class that provides API for callback jitter. This class provides the API to visualize the execution frequency per unit of time for each callback and to obtain it in the pandas DataFrame format.","title":"CallbackFrequencyPlot"},{"location":"plot/#caret_analyze.plot.bokeh.callback_info.CallbackJitterPlot","text":"Bases: TimeSeriesPlot Class that provides API for callback jitter. This class provides the API to visualize the jitter per unit of time for each callback and to obtain it in the pandas DataFrame format.","title":"CallbackJitterPlot"},{"location":"plot/#caret_analyze.plot.bokeh.callback_info.CallbackLatencyPlot","text":"Bases: TimeSeriesPlot Class that provides API for callback latency. This class provides the API to visualize the latency per unit of time for each callback and to obtain it in the pandas DataFrame format.","title":"CallbackLatencyPlot"},{"location":"plot/#caret_analyze.plot.bokeh.callback_info_factory","text":"","title":"callback_info_factory"},{"location":"plot/#caret_analyze.plot.bokeh.callback_info_factory.Plot","text":"","title":"Plot"},{"location":"plot/#caret_analyze.plot.bokeh.callback_info_factory.Plot.create_callback_frequency_plot","text":"Get CallbackFrequencyPlot instance. Parameters: Name Type Description Default callbacks CallbacksType CallbacksType = Union[Application, Executor, Node, CallbackGroup, List[CallbackBase]]. Instances that have callbacks or a list of callbacks. required Returns: Type Description CallbackFrequencyPlot","title":"create_callback_frequency_plot()"},{"location":"plot/#caret_analyze.plot.bokeh.callback_info_factory.Plot.create_callback_jitter_plot","text":"Get CallbackJitterPlot instance. Parameters: Name Type Description Default callbacks CallbacksType CallbacksType = Union[Application, Executor, Node, CallbackGroup, List[CallbackBase]]. Instances that have callbacks or a list of callbacks. required Returns: Type Description CallbackJitterPlot","title":"create_callback_jitter_plot()"},{"location":"plot/#caret_analyze.plot.bokeh.callback_info_factory.Plot.create_callback_latency_plot","text":"Get CallbackLatencyPlot instance. Parameters: Name Type Description Default callbacks CallbacksType CallbacksType = Union[Application, Executor, Node, CallbackGroup, List[CallbackBase]]. Instances that have callbacks or a list of callbacks. required Returns: Type Description CallbackLatencyPlot","title":"create_callback_latency_plot()"},{"location":"plot/#caret_analyze.plot.bokeh.callback_info_interface","text":"","title":"callback_info_interface"},{"location":"plot/#caret_analyze.plot.bokeh.callback_info_interface.TimeSeriesPlot","text":"","title":"TimeSeriesPlot"},{"location":"plot/#caret_analyze.plot.bokeh.callback_info_interface.TimeSeriesPlot.show","text":"Draw a line graph for each callback using the bokeh library. Parameters: Name Type Description Default xaxis_type Optional [ str ] Type of x-axis of the line graph to be plotted. \"system_time\", \"index\", or \"simtime\" can be specified. The default is \"system_time\". None ywheel_zoom bool If True, the drawn graph can be expanded in the y-axis direction by the mouse wheel. True Raises: Type Description UnsupportedTypeError Argument xaxis_type is not \"system_time\", \"index\", or \"simtime\".","title":"show()"},{"location":"plot/#caret_analyze.plot.bokeh.callback_info_interface.TimeSeriesPlot.to_dataframe","text":"Get time series data for each callback in pandas DataFrame format. Parameters: Name Type Description Default xaxis_type Optional [ str ] Type of time for timestamp. \"system_time\", \"index\", or \"simtime\" can be specified. The default is \"system_time\". None Raises: Type Description UnsupportedTypeError Argument xaxis_type is not \"system_time\", \"index\", or \"simtime\".","title":"to_dataframe()"},{"location":"plot/#caret_analyze.plot.bokeh.callback_info_interface.TimeSeriesPlot.to_dataframe--notes","text":"xaxis_type \"system_time\" and \"index\" return the same DataFrame.","title":"Notes"},{"location":"runtime/","text":"Application # Bases: Summarizable callback_group_names () property # Get callback group names. Returns: Type Description List [ str ] callback group name list. callback_groups () property # Get callback groups. Returns: Type Description List [ CallbackGroup ] callback group list. callback_names () property # Get callback names. Returns: Type Description List [ str ] callback name list. callbacks () property # Get callbacks. Returns: Type Description List [ CallbackBase ] callback list. communications () property # Get communications. Returns: Type Description List [ Communication ] communication list. executor_names () property # Get executor names. Returns: Type Description List [ str ] executor name list. executors () property # Get executors. Returns: Type Description List [ Executor ] executor list. get_callback ( callback_name ) # Get callback that mathces the condition. Parameters: Name Type Description Default callback_name str callback name to get. required Returns: Type Description CallbackBase callback that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition. get_callback_group ( callback_group_name ) # Get callback group that matches the condition. Parameters: Name Type Description Default callback_group_name str callback group name to get. required Returns: Type Description CallbackBase callback group that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition. get_callbacks ( * callback_names ) # Get callbacks that match the condition. Parameters: Name Type Description Default callback_names Tuple [ str , ...] callback names to get. required Returns: Type Description List [ CallbackBase ] callbacks that match the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition. get_communication ( publisher_node_name , subscription_node_name , topic_name ) # Get communication that matches the condition. Parameters: Name Type Description Default publisher_node_name str node name that publishes the message. required subscription_node_name str node name that subscribe the message. required topic_name str topic name. required Returns: Type Description Communication communication that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition. get_communications ( topic_name ) # Get communication that matches the condition. Parameters: Name Type Description Default topic_name str topic name to get. required Returns: Type Description List [ Communication ] communications that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition. get_executor ( executor_name ) # Get executor that matches the condition. Parameters: Name Type Description Default executor_name str executor name to get. The name is defined in the architecture file (ex: executor_0). required Returns: Type Description Executor executor that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition. get_node ( node_name ) # Get node that matches the condition. Parameters: Name Type Description Default node_name str node name to get. required Returns: Type Description Node node that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition. get_node_path ( node_name , subscribe_topic_name , publish_topic_name ) # Get node path that matches the condition. Parameters: Name Type Description Default node_name str node name to get. required subscribe_topic_name Optional [ str ] topic name which the node subscribes. required publish_topic_name Optional [ str ] topic name which the node publishes. required Returns: Type Description NodePathStructValue node path that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition. get_node_paths ( node_name ) # Get node paths. Parameters: Name Type Description Default node_name str node name to get. required Returns: Type Description List [ NodePathStructValue ] node path list. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition. get_path ( path_name ) # Get path that matches the condition. Parameters: Name Type Description Default path_name str path name to get. required Returns: Type Description Path path that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition. node_names () property # Get node names. Returns: Type Description List [ str ] node name list. node_paths () property # Get paths. Returns: Type Description List [ NodePathStructValue ] path list. nodes () property # Get nodes. Returns: Type Description List [ Node ] node list. path_names () property # Get path names. Returns: Type Description List [ str ] path name list. paths () property # Get paths. Returns: Type Description List [ Path ] path list. summary () property # Get application summary. Returns: Type Description Summary summary info. topic_names () property # Get topic names. Returns: Type Description List [ str ] topic name list. CallbackGroup # Bases: Summarizable callback_group_type () property # Get callback_group_type. Returns: Type Description CallbackGroupType callback_group_type_name () property # Get callback_group_type name. Returns: Type Description CallbackGroupType name node_name () property # Get node name. Returns: Type Description str node name VariablePassing # Bases: PathBase , Summarizable callback_name_read () property # Get read-side callback name. Returns: Type Description [ str ] read-side callback name. callback_name_write () property # Get write-side callback name. Returns: Type Description [ str ] write-side callback name. node_name () property # Get node name. Returns: Type Description str node name application # Application # Bases: Summarizable callback_group_names () property # Get callback group names. Returns: Type Description List [ str ] callback group name list. callback_groups () property # Get callback groups. Returns: Type Description List [ CallbackGroup ] callback group list. callback_names () property # Get callback names. Returns: Type Description List [ str ] callback name list. callbacks () property # Get callbacks. Returns: Type Description List [ CallbackBase ] callback list. communications () property # Get communications. Returns: Type Description List [ Communication ] communication list. executor_names () property # Get executor names. Returns: Type Description List [ str ] executor name list. executors () property # Get executors. Returns: Type Description List [ Executor ] executor list. get_callback ( callback_name ) # Get callback that mathces the condition. Parameters: Name Type Description Default callback_name str callback name to get. required Returns: Type Description CallbackBase callback that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition. get_callback_group ( callback_group_name ) # Get callback group that matches the condition. Parameters: Name Type Description Default callback_group_name str callback group name to get. required Returns: Type Description CallbackBase callback group that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition. get_callbacks ( * callback_names ) # Get callbacks that match the condition. Parameters: Name Type Description Default callback_names Tuple [ str , ...] callback names to get. required Returns: Type Description List [ CallbackBase ] callbacks that match the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition. get_communication ( publisher_node_name , subscription_node_name , topic_name ) # Get communication that matches the condition. Parameters: Name Type Description Default publisher_node_name str node name that publishes the message. required subscription_node_name str node name that subscribe the message. required topic_name str topic name. required Returns: Type Description Communication communication that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition. get_communications ( topic_name ) # Get communication that matches the condition. Parameters: Name Type Description Default topic_name str topic name to get. required Returns: Type Description List [ Communication ] communications that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition. get_executor ( executor_name ) # Get executor that matches the condition. Parameters: Name Type Description Default executor_name str executor name to get. The name is defined in the architecture file (ex: executor_0). required Returns: Type Description Executor executor that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition. get_node ( node_name ) # Get node that matches the condition. Parameters: Name Type Description Default node_name str node name to get. required Returns: Type Description Node node that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition. get_node_path ( node_name , subscribe_topic_name , publish_topic_name ) # Get node path that matches the condition. Parameters: Name Type Description Default node_name str node name to get. required subscribe_topic_name Optional [ str ] topic name which the node subscribes. required publish_topic_name Optional [ str ] topic name which the node publishes. required Returns: Type Description NodePathStructValue node path that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition. get_node_paths ( node_name ) # Get node paths. Parameters: Name Type Description Default node_name str node name to get. required Returns: Type Description List [ NodePathStructValue ] node path list. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition. get_path ( path_name ) # Get path that matches the condition. Parameters: Name Type Description Default path_name str path name to get. required Returns: Type Description Path path that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition. node_names () property # Get node names. Returns: Type Description List [ str ] node name list. node_paths () property # Get paths. Returns: Type Description List [ NodePathStructValue ] path list. nodes () property # Get nodes. Returns: Type Description List [ Node ] node list. path_names () property # Get path names. Returns: Type Description List [ str ] path name list. paths () property # Get paths. Returns: Type Description List [ Path ] path list. summary () property # Get application summary. Returns: Type Description Summary summary info. topic_names () property # Get topic names. Returns: Type Description List [ str ] topic name list. callback_group # CallbackGroup # Bases: Summarizable callback_group_type () property # Get callback_group_type. Returns: Type Description CallbackGroupType callback_group_type_name () property # Get callback_group_type name. Returns: Type Description CallbackGroupType name node_name () property # Get node name. Returns: Type Description str node name path_base # PathBase # Base class for Latency. column_names () property # Get column names. Returns: Type Description List [ str ] column names to_dataframe ( remove_dropped = False , treat_drop_as_delay = False , lstrip_s = 0 , rstrip_s = 0 , * , shaper = None ) # Convert to dataframe. Parameters: Name Type Description Default remove_dropped If true, eliminate the records that caused the drop. False treat_drop_as_delay Convert dropped records as a delay. Valid only when remove_dropped=false. False lstrip Remove from beginning. [s] required rstrip Remove from end [s] required Returns: Type Description pandas . DataFrame Information for each delay. to_histogram ( binsize_ns = 1000000 , treat_drop_as_delay = False , lstrip_s = 0 , rstrip_s = 0 , * , shaper = None ) # Convert to histogram data. Parameters: Name Type Description Default binsize_ns int bin size for histogram. default 1ms. 1000000 treat_drop_as_delay bool Convert dropped records as a delay. False lstrip Remove from beginning. [s] required rstrip Remove from end [s] required Returns: Type Description pandas . DataFrame Information for each delay. to_records () # Convert to records. Returns: Type Description RecordsInterface Information for each delay. to_timeseries ( remove_dropped = False , treat_drop_as_delay = False , lstrip_s = 0 , rstrip_s = 0 , * , shaper = None ) # Convert to timeseries data. Parameters: Name Type Description Default remove_dropped bool If true, eliminate the records that caused the drop. False treat_drop_as_delay bool Convert dropped records as a delay. Valid only when remove_dropped=false. False lstrip Remove from beginning. [s] required rstrip Remove from end [s] required Returns: Type Description pandas . DataFrame Information for each delay. variable_passing # VariablePassing # Bases: PathBase , Summarizable callback_name_read () property # Get read-side callback name. Returns: Type Description [ str ] read-side callback name. callback_name_write () property # Get write-side callback name. Returns: Type Description [ str ] write-side callback name. node_name () property # Get node name. Returns: Type Description str node name","title":"Runtime"},{"location":"runtime/#caret_analyze.runtime.Application","text":"Bases: Summarizable","title":"Application"},{"location":"runtime/#caret_analyze.runtime.application.Application.callback_group_names","text":"Get callback group names. Returns: Type Description List [ str ] callback group name list.","title":"callback_group_names()"},{"location":"runtime/#caret_analyze.runtime.application.Application.callback_groups","text":"Get callback groups. Returns: Type Description List [ CallbackGroup ] callback group list.","title":"callback_groups()"},{"location":"runtime/#caret_analyze.runtime.application.Application.callback_names","text":"Get callback names. Returns: Type Description List [ str ] callback name list.","title":"callback_names()"},{"location":"runtime/#caret_analyze.runtime.application.Application.callbacks","text":"Get callbacks. Returns: Type Description List [ CallbackBase ] callback list.","title":"callbacks()"},{"location":"runtime/#caret_analyze.runtime.application.Application.communications","text":"Get communications. Returns: Type Description List [ Communication ] communication list.","title":"communications()"},{"location":"runtime/#caret_analyze.runtime.application.Application.executor_names","text":"Get executor names. Returns: Type Description List [ str ] executor name list.","title":"executor_names()"},{"location":"runtime/#caret_analyze.runtime.application.Application.executors","text":"Get executors. Returns: Type Description List [ Executor ] executor list.","title":"executors()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_callback","text":"Get callback that mathces the condition. Parameters: Name Type Description Default callback_name str callback name to get. required Returns: Type Description CallbackBase callback that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition.","title":"get_callback()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_callback_group","text":"Get callback group that matches the condition. Parameters: Name Type Description Default callback_group_name str callback group name to get. required Returns: Type Description CallbackBase callback group that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition.","title":"get_callback_group()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_callbacks","text":"Get callbacks that match the condition. Parameters: Name Type Description Default callback_names Tuple [ str , ...] callback names to get. required Returns: Type Description List [ CallbackBase ] callbacks that match the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition.","title":"get_callbacks()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_communication","text":"Get communication that matches the condition. Parameters: Name Type Description Default publisher_node_name str node name that publishes the message. required subscription_node_name str node name that subscribe the message. required topic_name str topic name. required Returns: Type Description Communication communication that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition.","title":"get_communication()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_communications","text":"Get communication that matches the condition. Parameters: Name Type Description Default topic_name str topic name to get. required Returns: Type Description List [ Communication ] communications that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition.","title":"get_communications()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_executor","text":"Get executor that matches the condition. Parameters: Name Type Description Default executor_name str executor name to get. The name is defined in the architecture file (ex: executor_0). required Returns: Type Description Executor executor that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition.","title":"get_executor()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_node","text":"Get node that matches the condition. Parameters: Name Type Description Default node_name str node name to get. required Returns: Type Description Node node that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition.","title":"get_node()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_node_path","text":"Get node path that matches the condition. Parameters: Name Type Description Default node_name str node name to get. required subscribe_topic_name Optional [ str ] topic name which the node subscribes. required publish_topic_name Optional [ str ] topic name which the node publishes. required Returns: Type Description NodePathStructValue node path that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition.","title":"get_node_path()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_node_paths","text":"Get node paths. Parameters: Name Type Description Default node_name str node name to get. required Returns: Type Description List [ NodePathStructValue ] node path list. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition.","title":"get_node_paths()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_path","text":"Get path that matches the condition. Parameters: Name Type Description Default path_name str path name to get. required Returns: Type Description Path path that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition.","title":"get_path()"},{"location":"runtime/#caret_analyze.runtime.application.Application.node_names","text":"Get node names. Returns: Type Description List [ str ] node name list.","title":"node_names()"},{"location":"runtime/#caret_analyze.runtime.application.Application.node_paths","text":"Get paths. Returns: Type Description List [ NodePathStructValue ] path list.","title":"node_paths()"},{"location":"runtime/#caret_analyze.runtime.application.Application.nodes","text":"Get nodes. Returns: Type Description List [ Node ] node list.","title":"nodes()"},{"location":"runtime/#caret_analyze.runtime.application.Application.path_names","text":"Get path names. Returns: Type Description List [ str ] path name list.","title":"path_names()"},{"location":"runtime/#caret_analyze.runtime.application.Application.paths","text":"Get paths. Returns: Type Description List [ Path ] path list.","title":"paths()"},{"location":"runtime/#caret_analyze.runtime.application.Application.summary","text":"Get application summary. Returns: Type Description Summary summary info.","title":"summary()"},{"location":"runtime/#caret_analyze.runtime.application.Application.topic_names","text":"Get topic names. Returns: Type Description List [ str ] topic name list.","title":"topic_names()"},{"location":"runtime/#caret_analyze.runtime.CallbackGroup","text":"Bases: Summarizable","title":"CallbackGroup"},{"location":"runtime/#caret_analyze.runtime.callback_group.CallbackGroup.callback_group_type","text":"Get callback_group_type. Returns: Type Description CallbackGroupType","title":"callback_group_type()"},{"location":"runtime/#caret_analyze.runtime.callback_group.CallbackGroup.callback_group_type_name","text":"Get callback_group_type name. Returns: Type Description CallbackGroupType name","title":"callback_group_type_name()"},{"location":"runtime/#caret_analyze.runtime.callback_group.CallbackGroup.node_name","text":"Get node name. Returns: Type Description str node name","title":"node_name()"},{"location":"runtime/#caret_analyze.runtime.VariablePassing","text":"Bases: PathBase , Summarizable","title":"VariablePassing"},{"location":"runtime/#caret_analyze.runtime.variable_passing.VariablePassing.callback_name_read","text":"Get read-side callback name. Returns: Type Description [ str ] read-side callback name.","title":"callback_name_read()"},{"location":"runtime/#caret_analyze.runtime.variable_passing.VariablePassing.callback_name_write","text":"Get write-side callback name. Returns: Type Description [ str ] write-side callback name.","title":"callback_name_write()"},{"location":"runtime/#caret_analyze.runtime.variable_passing.VariablePassing.node_name","text":"Get node name. Returns: Type Description str node name","title":"node_name()"},{"location":"runtime/#caret_analyze.runtime.application","text":"","title":"application"},{"location":"runtime/#caret_analyze.runtime.application.Application","text":"Bases: Summarizable","title":"Application"},{"location":"runtime/#caret_analyze.runtime.application.Application.callback_group_names","text":"Get callback group names. Returns: Type Description List [ str ] callback group name list.","title":"callback_group_names()"},{"location":"runtime/#caret_analyze.runtime.application.Application.callback_groups","text":"Get callback groups. Returns: Type Description List [ CallbackGroup ] callback group list.","title":"callback_groups()"},{"location":"runtime/#caret_analyze.runtime.application.Application.callback_names","text":"Get callback names. Returns: Type Description List [ str ] callback name list.","title":"callback_names()"},{"location":"runtime/#caret_analyze.runtime.application.Application.callbacks","text":"Get callbacks. Returns: Type Description List [ CallbackBase ] callback list.","title":"callbacks()"},{"location":"runtime/#caret_analyze.runtime.application.Application.communications","text":"Get communications. Returns: Type Description List [ Communication ] communication list.","title":"communications()"},{"location":"runtime/#caret_analyze.runtime.application.Application.executor_names","text":"Get executor names. Returns: Type Description List [ str ] executor name list.","title":"executor_names()"},{"location":"runtime/#caret_analyze.runtime.application.Application.executors","text":"Get executors. Returns: Type Description List [ Executor ] executor list.","title":"executors()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_callback","text":"Get callback that mathces the condition. Parameters: Name Type Description Default callback_name str callback name to get. required Returns: Type Description CallbackBase callback that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition.","title":"get_callback()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_callback_group","text":"Get callback group that matches the condition. Parameters: Name Type Description Default callback_group_name str callback group name to get. required Returns: Type Description CallbackBase callback group that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition.","title":"get_callback_group()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_callbacks","text":"Get callbacks that match the condition. Parameters: Name Type Description Default callback_names Tuple [ str , ...] callback names to get. required Returns: Type Description List [ CallbackBase ] callbacks that match the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition.","title":"get_callbacks()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_communication","text":"Get communication that matches the condition. Parameters: Name Type Description Default publisher_node_name str node name that publishes the message. required subscription_node_name str node name that subscribe the message. required topic_name str topic name. required Returns: Type Description Communication communication that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition.","title":"get_communication()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_communications","text":"Get communication that matches the condition. Parameters: Name Type Description Default topic_name str topic name to get. required Returns: Type Description List [ Communication ] communications that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition.","title":"get_communications()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_executor","text":"Get executor that matches the condition. Parameters: Name Type Description Default executor_name str executor name to get. The name is defined in the architecture file (ex: executor_0). required Returns: Type Description Executor executor that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition.","title":"get_executor()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_node","text":"Get node that matches the condition. Parameters: Name Type Description Default node_name str node name to get. required Returns: Type Description Node node that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition.","title":"get_node()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_node_path","text":"Get node path that matches the condition. Parameters: Name Type Description Default node_name str node name to get. required subscribe_topic_name Optional [ str ] topic name which the node subscribes. required publish_topic_name Optional [ str ] topic name which the node publishes. required Returns: Type Description NodePathStructValue node path that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition.","title":"get_node_path()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_node_paths","text":"Get node paths. Parameters: Name Type Description Default node_name str node name to get. required Returns: Type Description List [ NodePathStructValue ] node path list. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition.","title":"get_node_paths()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_path","text":"Get path that matches the condition. Parameters: Name Type Description Default path_name str path name to get. required Returns: Type Description Path path that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition.","title":"get_path()"},{"location":"runtime/#caret_analyze.runtime.application.Application.node_names","text":"Get node names. Returns: Type Description List [ str ] node name list.","title":"node_names()"},{"location":"runtime/#caret_analyze.runtime.application.Application.node_paths","text":"Get paths. Returns: Type Description List [ NodePathStructValue ] path list.","title":"node_paths()"},{"location":"runtime/#caret_analyze.runtime.application.Application.nodes","text":"Get nodes. Returns: Type Description List [ Node ] node list.","title":"nodes()"},{"location":"runtime/#caret_analyze.runtime.application.Application.path_names","text":"Get path names. Returns: Type Description List [ str ] path name list.","title":"path_names()"},{"location":"runtime/#caret_analyze.runtime.application.Application.paths","text":"Get paths. Returns: Type Description List [ Path ] path list.","title":"paths()"},{"location":"runtime/#caret_analyze.runtime.application.Application.summary","text":"Get application summary. Returns: Type Description Summary summary info.","title":"summary()"},{"location":"runtime/#caret_analyze.runtime.application.Application.topic_names","text":"Get topic names. Returns: Type Description List [ str ] topic name list.","title":"topic_names()"},{"location":"runtime/#caret_analyze.runtime.callback_group","text":"","title":"callback_group"},{"location":"runtime/#caret_analyze.runtime.callback_group.CallbackGroup","text":"Bases: Summarizable","title":"CallbackGroup"},{"location":"runtime/#caret_analyze.runtime.callback_group.CallbackGroup.callback_group_type","text":"Get callback_group_type. Returns: Type Description CallbackGroupType","title":"callback_group_type()"},{"location":"runtime/#caret_analyze.runtime.callback_group.CallbackGroup.callback_group_type_name","text":"Get callback_group_type name. Returns: Type Description CallbackGroupType name","title":"callback_group_type_name()"},{"location":"runtime/#caret_analyze.runtime.callback_group.CallbackGroup.node_name","text":"Get node name. Returns: Type Description str node name","title":"node_name()"},{"location":"runtime/#caret_analyze.runtime.path_base","text":"","title":"path_base"},{"location":"runtime/#caret_analyze.runtime.path_base.PathBase","text":"Base class for Latency.","title":"PathBase"},{"location":"runtime/#caret_analyze.runtime.path_base.PathBase.column_names","text":"Get column names. Returns: Type Description List [ str ] column names","title":"column_names()"},{"location":"runtime/#caret_analyze.runtime.path_base.PathBase.to_dataframe","text":"Convert to dataframe. Parameters: Name Type Description Default remove_dropped If true, eliminate the records that caused the drop. False treat_drop_as_delay Convert dropped records as a delay. Valid only when remove_dropped=false. False lstrip Remove from beginning. [s] required rstrip Remove from end [s] required Returns: Type Description pandas . DataFrame Information for each delay.","title":"to_dataframe()"},{"location":"runtime/#caret_analyze.runtime.path_base.PathBase.to_histogram","text":"Convert to histogram data. Parameters: Name Type Description Default binsize_ns int bin size for histogram. default 1ms. 1000000 treat_drop_as_delay bool Convert dropped records as a delay. False lstrip Remove from beginning. [s] required rstrip Remove from end [s] required Returns: Type Description pandas . DataFrame Information for each delay.","title":"to_histogram()"},{"location":"runtime/#caret_analyze.runtime.path_base.PathBase.to_records","text":"Convert to records. Returns: Type Description RecordsInterface Information for each delay.","title":"to_records()"},{"location":"runtime/#caret_analyze.runtime.path_base.PathBase.to_timeseries","text":"Convert to timeseries data. Parameters: Name Type Description Default remove_dropped bool If true, eliminate the records that caused the drop. False treat_drop_as_delay bool Convert dropped records as a delay. Valid only when remove_dropped=false. False lstrip Remove from beginning. [s] required rstrip Remove from end [s] required Returns: Type Description pandas . DataFrame Information for each delay.","title":"to_timeseries()"},{"location":"runtime/#caret_analyze.runtime.variable_passing","text":"","title":"variable_passing"},{"location":"runtime/#caret_analyze.runtime.variable_passing.VariablePassing","text":"Bases: PathBase , Summarizable","title":"VariablePassing"},{"location":"runtime/#caret_analyze.runtime.variable_passing.VariablePassing.callback_name_read","text":"Get read-side callback name. Returns: Type Description [ str ] read-side callback name.","title":"callback_name_read()"},{"location":"runtime/#caret_analyze.runtime.variable_passing.VariablePassing.callback_name_write","text":"Get write-side callback name. Returns: Type Description [ str ] write-side callback name.","title":"callback_name_write()"},{"location":"runtime/#caret_analyze.runtime.variable_passing.VariablePassing.node_name","text":"Get node name. Returns: Type Description str node name","title":"node_name()"}]}